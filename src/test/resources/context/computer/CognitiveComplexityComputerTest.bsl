Функция Пример1(ТипКласса)
    Если ТипКласса.Неизвестен() Тогда                                                  // +1
        Возврат Символы.НеизвестныйСимвол;
    КонецЕсли;

    НеизвестностьНайдена = Ложь;
    СписокСимволов = ТипКласса.ПолучитьСимвол().Потомки.Поиск("имя");
    Для Каждого Символ Из СписокСимволов Цикл                                          // +1
        Если Символ.ИмеетТип(Символы.Странное)                                         // +2 (nesting = 1)
            И НЕ Символы.Экспортный() Тогда                                            // +1

            Если МожноПереопределить(Символ) Тогда                                     // +3 (nesting = 2)
                Переопредялемость = ПроверитьПереопределяемость(Символ, ТипКласса);
                Если Переопределяемость = Неопределено Тогда                           // +4 (nesting = 3)
                    Если НЕ НеизвестностьНайдена Тогда                                 // +5 (nesting = 4)
                        НеизвестностьНайдена = Истина;
                    КонецЕсли;
                ИначеЕсли Переопределяемость Тогда                                     // +1
                    Возврат Символ;
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;

    Если НеизвестностьНайдена Тогда                                                   // +1
        Возврат Символы.НеизвестныйСимвол;
    КонецЕсли;

    Возврат Неопределено;
КонецФункции

Процедура Пример2(Знач Запись, Знач Транзакция)
	ИндексТранзакции = ПолучитьИндексТранзакции();

	Пока Истина Цикл                                                                                 // +1
		Попытка

			Если Первый <> Неопределено Тогда                                                        // +2 (nesting = 1)
				Если Первый.ПолучитьВерсию() > Запись.ПолучитьВерсию() Тогда                         // +3 (nesting = 2)
					ВызватьИсключение "Откат";
				КонецЕсли;

				Если Транзакция.Активна() Тогда                                                      // +3 (nesting = 2)
					сч = Первый;
					Пока сч <> Неопределено Цикл                                                     // +4 (nesting = 3)
						Версия = сч.ПолучитьВерсию();
						Зависимости = ПолучитьЗависимости(Версия, Транзакция.СтатусТранзакции(), 0);

						Если (Зависимости = Неопределено) Тогда                                      // +5 (nesting = 4)
							ВызватьИсключение "Повторить попытку";
						КонецЕсли;
						Если Зависимости.Количество() <> 0                                           // +5 (nesting = 4)
							И НЕ ЕстьРекурсивныеЗависимости(Зависимости) Тогда                       // +1
							ВызватьИсключение "Откат";
						КонецЕсли;
					КонецЦикла;
					сч = сч.ПолучитьПредыдущий();
				КонецЕсли;
			КонецЕсли;

			Запись.УстановитьПредыдущий(Первый);
			Первый = Запись;
			Прервать;

		Исключение                                                                                   // +2 (nesting = 1)
			Попытка
				Зависимости = ПолучитьЗависимости(Версия, Транзакция.СтатусТранзакции(), МаксимальноеВремяОжидания());

				Если Зависимости.Количество() <> 0                                                   // +3 (nesting = 2)
					И НЕ ЕстьРекурсивныеЗависимости(Зависимости) Тогда                               // +1
					ВызватьИсключение "Откат";
				КонецЕсли;
			Исключение                                                                               // +3 (nesting = 2)
				ВызватьИсключение;
			КонецПопытки;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ВРегулярноеВыражение(Шаблон, РазделительПути)
	ЭкранированныйРазделительПути = "\\" + РазделительПути;
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("^");
	сч = СтрНачинаетсяС(Шаблон, "/") ИЛИ                                    // +1
		?(Шаблон.startsWith("\\"), 1, 0);                                   // +1
	Пока сч < СтрДлина(Шаблон) Цикл                                         // +1
		Символ = Сред(Шаблон, сч, 1);
		Если (СпецСимволы.Индекс(Символ) <> -1) Тогда                       // +2 (nesting = 1)
			МассивСтрок.Добавить("\\");
			МассивСтрок.Добавить(Символ);
		ИначеЕсли (Символ = "*") Тогда                                      // +1
			Если (сч + 1 < СтрДлина(Шаблон)                                 // +3 (nesting = 2)
				И Сред(Шаблон, сч + 1, 1) = "*") Тогда                      // +1

				Если (сч + 2 < СтрДлина(Шаблон)                             // +4 (nesting = 3)
					И ЭтоСлэш(Сред(Шаблон, сч + 2, 1))) Тогда               // +1

					МассивСтрок.Добавить("(?:.*");
					МассивСтрок.Добавить(ЭкранированныйРазделительПути);
					МассивСтрок.Добавить("|)");

					сч = сч + 2;
				Иначе                                                       // +1
					МассивСтрок.Добавить(".*");
					сч = сч + 1;
				КонецЕсли;
			Иначе                                                           // +1
				МассивСтрок.Добавить("[^");
				МассивСтрок.Добавить(ЭкранированныйРазделительПути);
				МассивСтрок.Добавить("]*?");
			КонецЕсли;

		ИначеЕсли (Символ = "?") Тогда                                      // +1
			МассивСтрок.Добавить("[^");
			МассивСтрок.Добавить(ЭкранированныйРазделительПути);
			МассивСтрок.Добавить("]");
		ИначеЕсли (ЭтоСлэш(Символ)) Тогда                                   // +1
			МассивСтрок.Добавить(ЭкранированныйРазделительПути);
		Иначе                                                               // +1
			МассивСтрок.Добавить(Символ);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;

	МассивСтрок.Добавить("$");
	Возврат СтрСоединить(МассивСтрок);

КонецФункции

Процедура ПроверкаРасчетаЛогическихВыражений()
    Если                // +1
        A
            И           // +1
        НЕ Б
            И
        НЕ
            (
                B
                    И   // +1
                C
            )
            И           // +1
            (
                Г
                    И
                Д
            )
        Тогда


    КонецЕсли;

    Если (             // +1 for `if`
       a И d И         // +1
       НЕ (b И c))     // +1
        Тогда
    КонецЕсли;

    Если (             // +1 for `if`
       a И             // +1
       (НЕ b ИЛИ НЕ c) // +1
       И d)            // +1
       Тогда
    КонецЕсли;
    
    Если (                // +1 for `if`
       a И d И            // +1
       (НЕ b ИЛИ НЕ c))   // +1
       Тогда
    КонецЕсли;

    А = А И НЕ (Б) И В;       // +1
КонецПроцедуры
