&НаСервере
Процедура Тест1()
    Массив = Новый Массив;
    Массив.Добавить(СтрокаТаблицы);
    Массив.Добавить(СтрокаТаблицы); // ошибка

    Коллекция = Новый Структура;
    Коллекция.Вставить("Ключ1", 1);
    Коллекция.Вставить("Ключ1", 1); // ошибка

    Коллекция2  = Новый Структура;
    Коллекция2.Вставить("Ключ1", 1);
    Коллекция2.Вставить("Ключ1", 2); // ошибка - вставка разных значений для одного ключа

    Если Условие() Тогда
        Массив.Добавить(СтрокаТаблицы); // не ошибка
        Коллекция.Вставить("Ключ1", 1); // не ошибка
        Коллекция2.Вставить("Ключ1", 2); // не ошибка
    КонецЕсли;

    Если Условие() Тогда
        Коллекция.Вставить("Ключ1", 1);
        Коллекция.Вставить("Ключ1", 3); // новая ошибка, а не повторение ошибки выше
    КонецЕсли;

    Для Каждого Элемент Из Коллекция Цикл
        Итог.Коллекция.Индексы.Добавить("Пользователь");
        Итог.Коллекция.Индексы.Добавить("Пользователь"); // ошибка

        Итог.ПерваяКоллекция.Индексы.Добавить("Пользователь");
        Итог.ВтораяКоллекция.Индексы.Добавить("Пользователь"); // не ошибка
    КонецЦикла;

    Если Условие() Тогда
        ПовторнаяСоздаваемаяКоллекция = Новый Массив;
        ПовторнаяСоздаваемаяКоллекция.Добавить("Пользователь");
        ОбщаяКоллекция.Добавить(ПовторнаяСоздаваемаяКоллекция);
        ПовторнаяСоздаваемаяКоллекция = Новый Массив;
        ПовторнаяСоздаваемаяКоллекция.Добавить("Пользователь"); // не ошибка
        ОбщаяКоллекция.Добавить(ПовторнаяСоздаваемаяКоллекция); // не ошибка

        Контекст.Коллекция.Вставить("ИмяПрава", "Чтение");
        ЗаполнитьСтруктуруРасчетаПрава(Результат.СтруктураРасчетаПраваЧтение, Контекст.Коллекция);
        Контекст.Коллекция.Вставить("ИмяПрава", "Изменение"); // не ошибка

        Контекст2.Коллекция.Вставить("ИмяПрава", "Чтение");
        Если Условие() Тогда
            ЕщеМетод(Контекст2);
        КонецЕсли;
        Контекст2.Коллекция.Вставить("ИмяПрава", "Изменение"); //не ошибка
    КонецЕсли;

    Если Условие() Тогда

        // ошибка далее валидна и возникает из-за того, что код не режется препроцессором
        #Если ТолстыйКлиентОбычноеПриложение Тогда
            ЭлементыСтиля.Вставить(ЭлементСтиля.Ключ, ЭлементСтиля.Значение.Получить()); // ошибка
        #Иначе
            ЭлементыСтиля.Вставить(ЭлементСтиля.Ключ, ЭлементСтиля.Значение);
        #КонецЕсли
    КонецЕсли;

    Если Условие() Тогда
        Элементы.ТипСтрокой.СписокВыбора.Вставить(0, "Дата", НСтр("ru = 'Дата'"));
        Элементы.ТипСтрокой.СписокВыбора.Вставить(0, "Строка", НСтр("ru = 'Строка'")); // не ошибка
    КонецЕсли;

КонецПроцедуры

Функция ПрерываниеПотокаВыполнения_Возврат(Ссылка, УчитыватьПометкуУдаления = Истина) Экспорт

	ВидыСвойствНабора = Новый Структура;
	ВидыСвойствНабора.Вставить("ДополнительныеРеквизиты", Ложь);

	ТипСсылки = Неопределено;
	МетаданныеВладельца = МетаданныеВладельцаЗначенийСвойствНабора(Ссылка, УчитыватьПометкуУдаления, ТипСсылки);

	Если МетаданныеВладельца = Неопределено Тогда
		Возврат ВидыСвойствНабора; // прерывание потока выполнения
	КонецЕсли;

	// Проверка использования дополнительных реквизитов.
	ВидыСвойствНабора.Вставить("ДополнительныеРеквизиты", Истина); // не ошибка

	Возврат ВидыСвойствНабора;

КонецФункции

Процедура ПрисваиваниеСложногоВыражения(Данные)
        Данные.ПовторнаяСоздаваемаяКоллекция = Новый Массив;
        Данные.ПовторнаяСоздаваемаяКоллекция.Добавить("Пользователь");
        Данные.ОбщаяКоллекция.Добавить(Данные.ПовторнаяСоздаваемаяКоллекция);

        Данные.ПовторнаяСоздаваемаяКоллекция = Новый Массив;
        Данные.ПовторнаяСоздаваемаяКоллекция.Добавить("Пользователь"); // не ошибка
        Данные.ОбщаяКоллекция.Добавить(Данные.ПовторнаяСоздаваемаяКоллекция); // не ошибка

        Данные.Метод().ПовторнаяСоздаваемаяКоллекция = Новый Массив;
        Данные.Метод().ПовторнаяСоздаваемаяКоллекция.Добавить("Пользователь");
        Данные.Метод().ПовторнаяСоздаваемаяКоллекция.Добавить("Пользователь"); // ошибка

        Данные.Метод().ОбщаяКоллекция.Добавить(Данные.Метод().ПовторнаяСоздаваемаяКоллекция);
        Данные.Метод().ОбщаяКоллекция.Добавить(Данные.Метод().ПовторнаяСоздаваемаяКоллекция); // ошибка

        Данные.Метод().ПовторнаяСоздаваемаяКоллекция = Новый Массив;
        Данные.Метод().ПовторнаяСоздаваемаяКоллекция.Добавить("Пользователь"); // не ошибка
        Данные.Метод().ОбщаяКоллекция.Добавить(Данные.Метод().ПовторнаяСоздаваемаяКоллекция); // не ошибка
КонецПроцедуры

Функция ВнутреннееПрерываниеПотокаВыполнения_ЦиклВнутриБлока()

	ВидыСвойствНабора = Новый Структура;
    ВидыСвойствНабора.Вставить("ДополнительныеРеквизиты", Ложь);

    Для Каждого Элемент Из Коллекция Цикл
        Прервать;
    КонецЦикла;

	// Проверка использования дополнительных реквизитов.
    ВидыСвойствНабора.Вставить("ДополнительныеРеквизиты", Истина); // ошибка

	Возврат ВидыСвойствНабора;

КонецФункции

Функция ДублированиеВПоследующихЭлементах()

    ПовторнаяСоздаваемаяКоллекция = Новый Массив;
    ПовторнаяСоздаваемаяКоллекция.Добавить("Пользователь");
    ОбщаяКоллекция.Добавить(ПовторнаяСоздаваемаяКоллекция);

    ПовторнаяСоздаваемаяКоллекция = Новый Массив;
    ПовторнаяСоздаваемаяКоллекция.Добавить("Пользователь"); // не ошибка
    ПовторнаяСоздаваемаяКоллекция.Добавить("Пользователь"); // ошибка

    ОбщаяКоллекция.Добавить(ПовторнаяСоздаваемаяКоллекция); // не ошибка
    ОбщаяКоллекция.Добавить(ПовторнаяСоздаваемаяКоллекция); // ошибка

КонецФункции

Процедура ЧастиКлюча(Данные)
        Данные.ОбщаяКоллекция.Вставить(Данные.Реквизит.ПовторнаяСоздаваемаяКоллекция);
        Данные.Реквизит = Выражение();
        Данные.ОбщаяКоллекция.Вставить(Данные.Реквизит.ПовторнаяСоздаваемаяКоллекция); // не ошибка

        Данные2.ОбщаяКоллекция2.Вставить(Данные2.Реквизит2.ПовторнаяСоздаваемаяКоллекция2);
        Реквизит2.ПовторнаяСоздаваемаяКоллекция2 = Новый Массив;
        Данные2.ОбщаяКоллекция2.Вставить(Данные2.Реквизит2.ПовторнаяСоздаваемаяКоллекция2); // ошибка

        Данные3.ОбщаяКоллекция3.Вставить(Данные3.Реквизит3.ПовторнаяСоздаваемаяКоллекция3);
        ПовторнаяСоздаваемаяКоллекция3 = Новый Массив;
        Данные3.ОбщаяКоллекция3.Вставить(Данные3.Реквизит3.ПовторнаяСоздаваемаяКоллекция3); // ошибка
КонецПроцедуры

Процедура ОдинаковыеИменаКлючаИМетода(Описания)
    Описания.Добавить(Ключ);
    Метод(Ключ());
    Описания.Добавить(Ключ); // ошибка

    Описания2.Добавить(Часть1.Часть2);
    Метод(Часть1().Часть2());
    Описания2.Добавить(Часть1.Часть2); // ошибка
    Описания2.Добавить(Часть1.Часть2); // а эта строка должна попасть в связанные элементы
КонецПроцедуры

Процедура СписокЗначений(Результат)
    Сведения = Новый СписокЗначений;
    Сведения.Добавить("", "ИННЮЛ");
    Сведения.Добавить("", "КППЮЛ"); // не ошибка

    Сведения2.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
    Сведения2.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина); // не ошибка, если включен параметр для исключения метода Добавить
КонецПроцедуры

Процедура ПрисваиваниеРодителюИОбращениеКПотомку(Данные)
        ПовторнаяСоздаваемаяКоллекция = Новый Массив;
        ПовторнаяСоздаваемаяКоллекция.Данные.Добавить("Пользователь");

        ПовторнаяСоздаваемаяКоллекция = Новый Массив;
        ПовторнаяСоздаваемаяКоллекция.Данные.Добавить("Пользователь"); // не ошибка
КонецПроцедуры

Процедура ДублированиеПустыхЗначений(Сведения, Метаданные)
    Сведения = Новый Массив;
	Сведения.Добавить("");

	Сведения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Конфигурация: %1'"), Метаданные.Представление()));
	Сведения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Версия конфигурации: %1'"), Метаданные.Версия));
	Сведения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Версия Библиотеки стандартных подсистем: %1'"), СтандартныеПодсистемыСервер.ВерсияБиблиотеки()));
	Сведения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Версия приложения: %1 (%2)'"), СистемнаяИнформация.ВерсияПриложения, СистемнаяИнформация.ТипПлатформы));

	Сведения.Добавить(""); // не ошибка

	Сведения.Добавить(НСтр("ru = 'Системная информация'"));

    Текст.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
    Текст.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента")); // не ошибка

	ЧастиСтроки.Добавить(" ");
	ЧастиСтроки.Добавить(" "); // не ошибка

    ОписаниеВызова.Добавить(Неопределено);
	ОписаниеВызова.Добавить(Неопределено); // не ошибка

	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Символы.ПС); // не ошибка
КонецПроцедуры

Процедура ИзменениеРеквизитаВставленногоОбъекта(Результат)
	Описание.ИмяРеквизита = "ТабельныйНомер";
	Описания.Добавить(Описание);
	Описание.ИмяРеквизита = "ДатаПриема";
	Описания.Добавить(Описание); // не ошибка

	Описания2.Добавить(Метод(Описание) + Коллекция.Значение);
	Коллекция.Значение.ИмяРеквизита = "ДатаПриема";
	Описания2.Добавить(Метод(Описание) + Коллекция.Значение); // не ошибка
КонецПроцедуры

Процедура ИзменениеРеквизитаВставленногоОбъекта(Результат)
	ИменаПромежуточныхВТ = Новый Массив;
	ИмяВТСотрудники = "";

	// Отбор сотрудников по документам-основаниям.
	СоздатьВТСотрудникиДляВедомостиПоОснованиям(МенеджерВременныхТаблиц, ОписаниеОперации, ИмяВТСотрудники);
	ИменаПромежуточныхВТ.Добавить(ИмяВТСотрудники);

	// Отбор сотрудников по организации и подразделению.
	СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников, ИмяВТСотрудники);
	ИменаПромежуточныхВТ.Добавить(ИмяВТСотрудники); // не ошибка
КонецПроцедуры

Процедура ИзменениеЗначенияИспользуемогоВКлюче(Результат)
    Лист.Данные.Вставить("П000001000102_" + Формат(НомСуффикса, "ЧГ="), "1000");

    НомСуффикса = НомСуффикса + 1;

    Лист.Данные.Вставить("П000001000102_" + Формат(НомСуффикса, "ЧГ="), "5000"); // не ошибка

	Протокол = "HTTP";
	Разрешения.Добавить(МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол));

	Протокол = "HTTPS";
	Разрешения.Добавить(МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол)); // не ошибка

	// Добавим имена событий механизмов расчета партий и себестоимости
	ПараметрыРасчета = Новый Структура("ЗапущенРасчетПартий", Истина);
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));

	ПараметрыРасчета = Новый Структура("ЗапущенРасчетПартий", Ложь);
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета)); // не ошибка
КонецПроцедуры

Процедура ПрерываниеПотокаВыполнения_БлокВЦикле(Коллекция, Коллекция2)
    Для Каждого Элемент Из Коллекция Цикл
        Коллекция2.Добавить(Элемент);
        Если Условие() Тогда
            Прервать;
        КонецЕсли;
        Коллекция2.Добавить(Элемент); // не ошибка
    КонецЦикла;
КонецПроцедуры

Процедура ДубльПриВызовеГлобальногоМетода(СтрокаТаблицы)
    Коллекция().Добавить(СтрокаТаблицы);
    Коллекция().Добавить(СтрокаТаблицы); // ошибка

    Коллекция2().Реквизит.Добавить(СтрокаТаблицы2);
    Коллекция2().Реквизит.Добавить(СтрокаТаблицы2); // ошибка
КонецПроцедуры

Процедура СтранноеДляПокрытия()
    Коллекция.Вставить();
    Коллекция.Вставить(); //не ошибка

    Коллекция2().Реквизит.Добавить();
    Коллекция2().Реквизит.Добавить(); // не ошибка
КонецПроцедуры
