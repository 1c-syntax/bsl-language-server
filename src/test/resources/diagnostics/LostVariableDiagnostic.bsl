Перем ЗначениеМодуля;
Процедура Тест1()
    Значение = 1; // ошибка
    Значение = 2; // ошибка
    МояПеременная = СтрЗаменить(КакаятоПеременная); // ошибка
    МояПеременная = СтрЗаменить(КакаятоДругаяПеременная); // ошибка
КонецПроцедуры

Процедура Тест2()
    ТекстЗапроса = "Первый"; // ошибка
    ТекстЗапроса = "Второй";
    Запрос = Новый Запрос(ТекстЗапроса);
КонецПроцедуры

Процедура Тест3()
    ТекстЗапроса = "Первый"; // нет ошибки
    Если Условие Тогда
      ТекстЗапроса = "Второй";
    КонецЕсли;
    Запрос = Новый Запрос(ТекстЗапроса);
КонецПроцедуры

Процедура Тест4()
    ТекстЗапроса = "Первый"; // ошибка
    Если Условие Тогда
      ТекстЗапроса = "Второй";
      Запрос = Новый Запрос(ТекстЗапроса);
    КонецЕсли;
КонецПроцедуры

Процедура Тест5()
    ТекстЗапроса = "Первый"; // ошибка
    Если Условие Тогда
        ТекстЗапроса = "Второй";
        Если Условие Тогда
           Запрос = Новый Запрос(ТекстЗапроса);
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

Процедура Тест6()
   Если Условие Тогда
       ТекстЗапроса = "Первый"; // не ошибка
   Иначе
       ТекстЗапроса = "Второй";
   КонецЕсли;
   Запрос = Новый Запрос(ТекстЗапроса);
КонецПроцедуры

Процедура Тест7()
   Если Условие Тогда
       ТекстЗапроса = "Первый"; // не ошибка
   Иначе
       ТекстЗапроса = "Второй"; // ошибка
       ТекстЗапроса = "Третий";
   КонецЕсли;
   Запрос = Новый Запрос(ТекстЗапроса);
КонецПроцедуры

Процедура Тест9()
  Попытка
    ТекстЗапроса = "Первый"; // не ошибка
  Исключение
    ТекстЗапроса = "Второй";
  КонецПопытки;
  Запрос = Новый Запрос(ТекстЗапроса);
КонецПроцедуры

Процедура Тест10()
  ТекстЗапроса = "Первый"; // ошибка
  ТекстЗапроса = "Второй";
  Если Условие Тогда
      Запрос = Новый Запрос(ТекстЗапроса);
  КонецЕсли;
КонецПроцедуры

Процедура Тест11()
  ТекстЗапроса = "Первый"; //не ошибка
  Если Условие Тогда
      ТекстЗапроса = "Второй";// не ошибка
      Запрос = Новый Запрос(ТекстЗапроса);
  КонецЕсли;
  Запрос = Новый Запрос(ТекстЗапроса); // ошибка
КонецПроцедуры

Процедура Тест12()
  ТекстЗапроса = "Первый"; //не ошибка
  Если Условие Тогда
      ТекстЗапроса = "Второй";// не ошибка
      Если Условие2 Тогда
          ТекстЗапроса = "Третий";// не ошибка
          Запрос = Новый Запрос(ТекстЗапроса);
      КонецЕсли;
      //Запрос = Новый Запрос(ТекстЗапроса);
  КонецЕсли;
  Запрос = Новый Запрос(ТекстЗапроса); // ошибка
КонецПроцедуры

Процедура Тест13()
  ТекстЗапроса = "Первый"; // не ошибка
  Если Условие Тогда
      ТекстЗапроса = "Второй"; // ошибка
  КонецЕсли;
КонецПроцедуры

Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок()
    Файл = Новый Файл(КаталогФич); // не ошибка
    Если Не Файл.Существует() Тогда
        Возврат;
    КонецЕсли;

    Файл = Новый Файл(КаталогФич); // ошибка
    БылиОшибки = Ложь;
    НачальныйКаталог = КаталогФич;
    КаталогПоиска    = НачальныйКаталог;

    Файл = Новый Файл(НачальныйКаталог); // ошибка
КонецПроцедуры

//Или другой пример правильного кода (изменение происходит только при определённых условиях):
Процедура ПерезаписьВУсловии()
    ЛокальнаяПеременная = ВызовМоейФункции(); // не ошибка
    Если Условие Тогда
        ЛокальнаяПеременная = 42;
    ИначеЕсли ДругоеУсловие Тогда
        ЛокальнаяПеременная = ВызовФункции();
    Иначе
        ЛокальнаяПеременная = 0; // ошибка
    КонецЕсли;
КонецПроцедуры

Процедура Тест14()
    ДобавляемыйНомер = 1;
    Пока Условие() Цикл
      ДобавляемыйНомер = ДобавляемыйНомер + 1; // не ошибка
    КонецЦикла;
КонецПроцедуры

Функция ВыраженияНаОднойСтроке()
    Комментарий = 10;Комментарий = 20; // сразу 2 ошибки (важно, что нет пробела после 10;)

    Возврат Неопределено;
КонецФункции

Функция РезультатВыполненияПриПеренаправлении(Знач ЗадачаСсылка)
    // в этом методе нет ошибок
    Комментарий = "Текст";
    Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);

    ТекстОповещения = "Текст";
    ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, Формат);

    ТекстЗапроса = "Текст";
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Текст", ДругойТекстЗапроса);

    Возврат Неопределено;
КонецФункции

Процедура Тест15()
    ВидПрава = ВидыПрав.Добавить(); // ошибка
    ВидПрава = ВидыПрав.Добавить(); // ошибка

    // ошибка
    НовыйПереход = ТаблицаПереходовНоваяСтрока("Начало", "СтраницаНавигацииНачало"); // нет ошибок
    НовыйПереход = ТаблицаПереходовНоваяСтрока("НастройкаВыгрузки", "СтраницаНавигацииПродолжение");
КонецПроцедуры

Процедура Тест16()
    // в этом методе нет ошибок
    КоличествоОбработанных = ПорцияЭлементовДанных.Количество();
    НачатьТранзакцию();
    Попытка
        Блокировка.Заблокировать();
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        КоличествоОбработанных = 0; // не ошибка
    КонецПопытки;
    ПорцияЭлементовДанных = Неопределено;

    ТребуетсяПрерватьОбработкуЭлементов(ПараметрыОбновления, КоличествоОбработанных);
КонецПроцедуры

Процедура УстановитьПометкуУдаленияДляОбъектов()
    Блокировка = Новый БлокировкаДанных;

    НачатьТранзакцию();
    Попытка
        ЭтоОшибкаБлокировки = Истина; // ошибка. а вот кейс ниже - не ошибка
        Блокировка.Заблокировать();

        ЭтоОшибкаБлокировки = Ложь;
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        Если ЭтоОшибкаБлокировки Тогда
        КонецЕсли;
    КонецПопытки;
КонецПроцедуры

Процедура ПереустановкаВБлокеИсключения()
    Блокировка = Новый БлокировкаДанных;

    НачатьТранзакцию();
    Попытка
        ЭтоОшибкаБлокировки = Истина; // не ошибка
        Блокировка.Заблокировать();
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        ЭтоОшибкаБлокировки = Ложь; // ошибка
    КонецПопытки;
КонецПроцедуры

Процедура ОперативнаяПамятьДоступнаяКлиентскомуПриложению()
    // в этом методе нет ошибок
    ДоступныйОбъем = 0;
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
    ДоступныйОбъем = 1;
#ИначеЕсли ТонкийКлиент Тогда
    ДоступныйОбъем = 2;
#Иначе
    ДоступныйОбъем = 0;
#КонецЕсли
    Возврат ДоступныйОбъем;
КонецПроцедуры

Процедура ПодготовитьТабличныйДокумент()
    ТабличныйДокумент.Вывести(Отступ);
    Для НомерЯчейки = 1 По 2 Цикл // не ошибка - другое правило про итератор
        ТабличныйДокумент.Присоединить(ПустаяЯчейка);
    КонецЦикла;

    Для НомерЯчейки = 1 По КоличествоЯчеекДляЗаполнения - 2 Цикл // не ошибка
        ПечатьСтроки(ЗначениеЗаполнения);
    КонецЦикла;
КонецПроцедуры

Процедура Событие(Параметры, Отказ)
    мСохраненныйДок = Неопределено; // не ошибка
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
    мСохраненныйДок = Параметры.ЗначениеКопирования; // ошибка
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтбораПоПериодуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь; // не ошибка
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеЧастиАдреса_ЕДТ(АдресСтруктура, СписокПолей)

    Представление = ""; // ошибка
    СтруктураПолей = Новый Структура(СписокПолей);
    ЗаполнитьЗначенияСвойств(СтруктураПолей, АдресСтруктура);

    МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
    Представление = МодульУправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(СтруктураПолей);

    Возврат Представление;

КонецФункции

&НаСервере
Функция ЗаполнитьТэгиОбъектов(РеквизитИмяОбъекта, ОбъектыОбработчика, РазметкаКода, ВнешниеТэги = Неопределено, СортироватьПоТэгам = Истина)

    ЭтоИмяПроцедуры = РеквизитИмяОбъекта = "Процедура" ИЛИ РеквизитИмяОбъекта = "Процедура2";
    ТэгиМодуля = РазметкаКода.Тэги.ПоМодулям[РазметкаКода.ИмяМодуля];
    Если ОбъектыОбработчика.Колонки.Найти("Тэги") = Неопределено Тогда
        ОбъектыОбработчика.Колонки.Добавить("Тэги", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
    КонецЕсли;
    ЕстьТэгиМодуляОбновления = ОбъектыОбработчика.Колонки.Найти("ТэгиМодуляОбновления") <> Неопределено;
    Если ТэгиМодуля = Неопределено Тогда
        ЛишниеТэги = Новый Массив; // не ошибка, если включен флаг Игнорировать типизацию для ЕДТ
        ЛишниеТэги = ЛишниеТэгиВОбласти(ВнешниеТэги, РазметкаКода); // ошибка

        Возврат ОбъектыОбработчика;
    КонецЕсли;

    Возврат ОбъектыОбработчика;
КонецФункции

Процедура ПереборКоллекции(ТабличныйДокумент)
    Для Каждого Элемент Из Коллекция Цикл // не ошибка - другое правило про итератор
        ТабличныйДокумент.Присоединить(ПустаяЯчейка);
    КонецЦикла;

    Для Каждого Элемент Из Коллекция Цикл // не ошибка - другое правило про итератор
        ПечатьСтроки(ЗначениеЗаполнения);
    КонецЦикла;
КонецПроцедуры

Процедура Тест17()
    #Область Первая
    #Область Вторая
    ТекстЗапроса = "Первый"; // ошибка
    ТекстЗапроса = "Второй";
    Запрос = Новый Запрос(ТекстЗапроса);
    #КонецОбласти
    #КонецОбласти
КонецПроцедуры

Процедура Тест18()
    ЗначениеМодуля = "Первый"; // ошибка
    ЗначениеМодуля = "Второй";
    Запрос = Новый Запрос(ЗначениеМодуля);
КонецПроцедуры

Процедура Тест19()
    ТекстЗапроса = "Первый"; // ошибка
    ТекстЗапроса = "Второй";
    Запрос = Новый Запрос(ТекстЗапроса);
    ТекстЗапроса = "Третий"; // также ошибка
КонецПроцедуры

Процедура Тест20()
    ЗначениеМодуля = "Первый"; // ошибка
    ЗначениеМодуля = "Второй";
    Запрос = Новый Запрос(ЗначениеМодуля);
    ЗначениеМодуля = "Третий"; // не ошибка
КонецПроцедуры

Процедура Тест21()
    Значение = 10; // не ошибка
    Для Каждого Элем ИЗ Коллекция Цикл
        Элем.Реквизит = Вычисление(Значение);
        Значение = 20; // не ошибка
    КонецЦикла;
КонецПроцедуры

ТекстЗапросаВБлоке = "Первый"; // ошибка
ТекстЗапросаВБлоке = "Второй";
Запрос = Новый Запрос(ТекстЗапросаВБлоке);

ЗначениеМодуля = "Первый"; // ошибка
ЗначениеМодуля = "Второй";
Запрос1 = Новый Запрос(ЗначениеМодуля);
