// ++ 20.08.2019 18538: Добавление проверки флага "Только при первом проведении".
//ПервоеПроведение = Ложь;
//Если Источник.ДополнительныеСвойства.Свойство("ПервоеПроведение")
//    И Событие = "ОбработкаПроведения" Тогда
//    ПервоеПроведение = Источник.ДополнительныеСвойства.ПервоеПроведение;
//КонецЕсли;
// -- 20.08.2019 18538: Добавление проверки флага "Только при первом проведении".

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДГОТОВКИ ДАННЫХ ДЛЯ ПРОБИТИЯ ДОКУМЕНТА
// ++ 18.02.2019 20000: Добавление новых обязательных тегов Фискального Чека.
Процедура ПолучитьШаблонЧека(ОбщиеПараметры, ОписаниеОшибки, ПараметрыПробития) Экспорт

    // Определим вид выписки (расход/приход) и если указаны возвраты, то возврат
    Объект = ПараметрыПробития.Объект;

    //++ 26.06.2019 20630: перенос из типовой АА6
    // Определим телефон и/или емаил
    //Свойства = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект.Ссылка);
    //КИПокупателя = Свойства.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ТелефонИЛИЭлектронныйАдресПокупателя, "Свойство");
    //Если НЕ КИПокупателя = Неопределено И ЗначениеЗаполнено(КИПокупателя.Значение) Тогда
    //    Телефон = СтрЗаменить(КИПокупателя.Значение, " " , "");
    //    Телефон = СтрЗаменить(Телефон, "(" , "");
    //    Телефон = СтрЗаменить(Телефон, ")" , "");
    //    Телефон = СтрЗаменить(Телефон, "-" , "");
    //
    //    Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(КИПокупателя.Значение) Тогда
    //        ОбщиеПараметры.ПокупательEmail = КИПокупателя.Значение;
    //    ИначеЕсли ОбщегоНазначенияКлиентСервер.СтрокаСодержитТолькоДопустимыеСимволы(Телефон,"+0123456789") И СтрНайти(Телефон,"+") = 1 Тогда
    //        ОбщиеПараметры.ПокупательНомер = КИПокупателя.Значение;
    //    Иначе
    //        ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки), ОписаниеОшибки+Символы.ПС, НСтр("ru = 'В поле ""Телефон или электронный адрес покупателя"" введены не корректные данные'"));
    //        Возврат;
    //    КонецЕсли;
    //КонецЕсли;

    // Настройка отправки электронного чека.
    // Если Электронно = Истина, то чек будет предоставлен в электронной форме, без печати.
    //ОбщиеПараметры.Электронно = Константы.НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателю.Получить();// Если Электронно = Истина, то чек будет предоставлен в электронной форме, без печати.
    // SMS отправляет средствами 1C.
    //ОбщиеПараметры.Отправляет1СSMS = Константы.ЭлектронныйЧекSMSПередаютсяПрограммой1С.Получить() И ЗначениеЗаполнено(ОбщиеПараметры.ПокупательНомер);
    // Email отправляет средствами 1C.
    //ОбщиеПараметры.Отправляет1СEmail = Константы.ЭлектронныйЧекEmailПередаютсяПрограммой1С.Получить() И ЗначениеЗаполнено(ОбщиеПараметры.ПокупательEmail);

    // Дополнительный реквизит чека
    //Свойства = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект.Ссылка);
    //ДополнительныйРеквизитЧека = Свойства.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныйРеквизитЧека, "Свойство");
    //Если НЕ ДополнительныйРеквизитЧека = Неопределено И ЗначениеЗаполнено(ДополнительныйРеквизитЧека.Значение) Тогда
    //    ОбщиеПараметры.ДополнительныйРеквизит = ДополнительныйРеквизитЧека.Значение;
    //КонецЕсли;

    // Настройка отправки электронного чека
    ОбщиеПараметры.Отправляет1СSMS = НЕ Константы.ОтправлятьЭлектронныеЧекиПоSMSЧерезОФД.Получить()
        И ЗначениеЗаполнено(ОбщиеПараметры.ПокупательНомер);
    ОбщиеПараметры.Отправляет1СEmail = НЕ Константы.ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД.Получить()
        И ЗначениеЗаполнено(ОбщиеПараметры.ПокупательEmail);
    ОбщиеПараметры.Электронно = Константы.НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателю.Получить()
        И (ОбщиеПараметры.Отправляет1СSMS ИЛИ ОбщиеПараметры.Отправляет1СEmail);

    // Пока оставим так как есть. Нужно для расчета ОСН.
    //СтруктураОрганизация = ПолучитьПараметрыОрганизации(
    //    ОрганизацияОбъекта,
    //    ПодразделениеКомпанииОбъекта,
    //    СкладКомпанииОбъекта,
    //    Дата);
    //СтруктураОрганизация = ПолучитьПараметрыОрганизации(ОрганизацияОбъекта);
    СтруктураОрганизация = ПолучитьПараметрыОрганизации(
        ОрганизацияОбъекта,
        ПодразделениеКомпанииОбъекта,
        СкладКомпанииОбъекта,
        Дата);

КонецПроцедуры
// -- 18.02.2019 20000: Добавление новых обязательных тегов Фискального Чека.


// Процедура ОбработкаПроведения_РеализацияАвтомобилей(Источник, Отказ, РежимПроведения)
//
//    ПроизведемДвиженияПоСкладскомуУчетуАвтомобилейСПробегом(Источник, Отказ, РежимПроведения);
//
//КонецПроцедуры

// Перем1 = Перем2 + 1;

// Далее два FP пока думаю как обойти

//ДкОбъект.ДатаЗакрытия = ТекущаяДатаСеанса();
ДкОбъект.Дата = ТекущаяДатаСеанса(); // +- Rarus 05.09.2018 - Падала ошибка, т.к. дата перемещения (местное время) оказывалась больше времени закрытия з/н (системное время).

// Получает дерево метаданных конфигурации с заданным отбором по объектам метаданных.
//
// Параметры:
//   Отбор - Структура - содержит значения элементов отбора.
//		Если параметр задан, то будет получено дерево метаданных в соответствии с заданным отбором:
//		Ключ - Строка - имя свойства элемента метаданных;
//		Значение - Массив - множество значений для отбора.
//
// Пример инициализации переменной "Отбор":
//
// Массив = Новый Массив;
// Массив.Добавить("Константа.ИспользоватьСинхронизациюДанных");
// Массив.Добавить("Справочник.Валюты");
// Массив.Добавить("Справочник.Организации");
// Отбор = Новый Структура;
// Отбор.Вставить("ПолноеИмя", Массив);
//
//  Возвращаемое значение:
//   ДеревоЗначений - дерево описания метаданных конфигурации.
//
Функция ПолучитьДеревоМетаданныхКонфигурации(Отбор = Неопределено) Экспорт


КонецФункции