{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Dictionary creation can be rewritten by dictionary literal",
  "severity": "Moderate",
  "comment": "This dictionary creation could be rewritten as a dictionary literal",
  "detailsInfo": "Reports situations when you can rewrite dictionary creation\nby using a dictionary literal.\n\nThis approach brings performance improvements.\n\n**Example:**\n\n```\ndic = {}\ndic['var'] = 1\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndic = {'var': 1}\n```",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 38,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 36,
        "length": 9,
        "offset": 94,
        "surroundingCode": "def createBSLLSConfiguration():\n    newPath = thisPath + \"/ssl/.bsl-language-server.json\"\n    data = {}\n    data['configurationRoot'] = './src'\n    data['diagnostics'] = {}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyDictCreationInspection"
  },
  "hash": "4876ff2a4b93651ce60565f6103a8c512332ef38a4aa7e4874b0c85ecf5158f9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'dir'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 28,
      "offset": 19,
      "length": 3,
      "code": {
        "startLine": 26,
        "length": 3,
        "offset": 38,
        "surroundingCode": "    os.system(cmd)\n\ndef get_bslls_jar(dir):\n    names = os.listdir(dir)\n    for name in names:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "0ed5382f28c49942e7fc86dc9db6ce58db1d6d55f8975ed048b8e5902598abe9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'arg' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 14,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 12,
        "length": 3,
        "offset": 46,
        "surroundingCode": "    benchmark(some_func, None)\n\ndef some_func(arg):\n    pathToConfig = createBSLLSConfiguration()\n    fullname = get_bslls_jar(dirName)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "081d69a436c528d9ceb0e020a834d346a9b4f103ccb64cf43e774b708aa1dc93"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Non-optimal list declaration",
  "severity": "Moderate",
  "comment": "This list creation could be rewritten as a list literal",
  "detailsInfo": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n```\nl = [1]\nl.append(2)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nl = [1, 2]\n```",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 17,
      "offset": 5,
      "length": 18,
      "code": {
        "startLine": 15,
        "length": 18,
        "offset": 88,
        "surroundingCode": "    pathToConfig = createBSLLSConfiguration()\n    fullname = get_bslls_jar(dirName)\n    cmdArgs = ['java']\n    cmdArgs.append('-jar')\n    cmdArgs.append(dirName + '/' + fullname)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyListCreationInspection"
  },
  "hash": "081171709628bcccef0a5365e02bd9079c3a9c25a939d4ee78b499b0ae79a43c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 15,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 13,
        "length": 12,
        "offset": 25,
        "surroundingCode": "\ndef some_func(arg):\n    pathToConfig = createBSLLSConfiguration()\n    fullname = get_bslls_jar(dirName)\n    cmdArgs = ['java']"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b30f88b9cf1682e7301b0ae2157fa78e21f3671a04e9d5b3b847258b814da835"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 17,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 15,
        "length": 7,
        "offset": 88,
        "surroundingCode": "    pathToConfig = createBSLLSConfiguration()\n    fullname = get_bslls_jar(dirName)\n    cmdArgs = ['java']\n    cmdArgs.append('-jar')\n    cmdArgs.append(dirName + '/' + fullname)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a9580aee1de58d3faec7a8a3cadadc17f54c46f7310c7aa22e77a0602cfe86bb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 36,
      "offset": 5,
      "length": 24,
      "code": {
        "startLine": 34,
        "length": 24,
        "offset": 21,
        "surroundingCode": "    return None\n\ndef createBSLLSConfiguration():\n    newPath = thisPath + \"/ssl/.bsl-language-server.json\"\n    data = {}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "6fb1cb2879146b7ea6305623435b7490d55d3a92060367bd8b4de77eb5bc1daa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 37,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 35,
        "length": 7,
        "offset": 37,
        "surroundingCode": "\ndef createBSLLSConfiguration():\n    newPath = thisPath + \"/ssl/.bsl-language-server.json\"\n    data = {}\n    data['configurationRoot'] = './src'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "b337ffb2734fb412d6dd0931c574c5d7ede9536e63522ab647ddf1dc8ec5c8e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 11,
      "offset": 1,
      "length": 34,
      "code": {
        "startLine": 9,
        "length": 34,
        "offset": 38,
        "surroundingCode": "dirName = thisPath + \"/build/libs\"  \n\ndef test_analyze_ssl31(benchmark):\n    benchmark(some_func, None)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "97e332890406172ba0f0723ca9b127fa195f11323845b187c1f0c1b02d30259b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 14,
      "offset": 1,
      "length": 19,
      "code": {
        "startLine": 12,
        "length": 19,
        "offset": 32,
        "surroundingCode": "    benchmark(some_func, None)\n\ndef some_func(arg):\n    pathToConfig = createBSLLSConfiguration()\n    fullname = get_bslls_jar(dirName)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "e6765c5275cad1c6a19fec580be3b2dbaa052ce5cfce8be17cbb94e2ba453707"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 28,
      "offset": 1,
      "length": 23,
      "code": {
        "startLine": 26,
        "length": 23,
        "offset": 20,
        "surroundingCode": "    os.system(cmd)\n\ndef get_bslls_jar(dir):\n    names = os.listdir(dir)\n    for name in names:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "6293aafe1cca6ad4177cc81ac7bfecfc3c915621f49fb2505d0071c48b3d9541"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 36,
      "offset": 1,
      "length": 31,
      "code": {
        "startLine": 34,
        "length": 31,
        "offset": 17,
        "surroundingCode": "    return None\n\ndef createBSLLSConfiguration():\n    newPath = thisPath + \"/ssl/.bsl-language-server.json\"\n    data = {}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "1e718d78aafc0e974bf1029d2218255d454d9640c92741e4eb3de57e6c922e04"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: W292 no newline at end of file",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/benchmark.py",
      "language": "Python",
      "line": 47,
      "offset": 12,
      "length": 7,
      "code": {
        "startLine": 45,
        "length": 7,
        "offset": 45,
        "surroundingCode": "        json.dump(data, outfile)\n\n    return newPath"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "cb56a28a0c0fe2dbb0bf5ce179ab40478bb0cac4e95dfc24969131262a089b02"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/gen-bandge.py",
      "language": "Python",
      "line": 6,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 4,
        "length": 4,
        "offset": 53,
        "surroundingCode": "value = '0'\nwith open(\"output.json\", \"r\") as file:\n  data = json.load(file)\n  total = data.get('benchmarks')[0].get('stats').get('mean')\n  value = '{:.2f}'.format(total)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "2a6049ba216a006155aa899e6772d18511aabf9bb194cc6152e60aea292b012b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/gen-bandge.py",
      "language": "Python",
      "line": 7,
      "offset": 3,
      "length": 5,
      "code": {
        "startLine": 5,
        "length": 5,
        "offset": 66,
        "surroundingCode": "with open(\"output.json\", \"r\") as file:\n  data = json.load(file)\n  total = data.get('benchmarks')[0].get('stats').get('mean')\n  value = '{:.2f}'.format(total)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "7099e161e09b1433a4fd6b8bdb6a89d49209949cd751d8f3ceb2b7249eb4d92c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/gen-bandge.py",
      "language": "Python",
      "line": 8,
      "offset": 3,
      "length": 5,
      "code": {
        "startLine": 6,
        "length": 5,
        "offset": 88,
        "surroundingCode": "  data = json.load(file)\n  total = data.get('benchmarks')[0].get('stats').get('mean')\n  value = '{:.2f}'.format(total)\n\nsvg = badge(left_text='Benchmark (SSL 1.0)', right_text=value)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "47013f5c21bb3438b56efa7edea93d96e1ed2c2a4eb730534e2d6c7c9b726fcd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Redeclared names without usages",
  "severity": "High",
  "comment": "Redeclared 'value' defined above without usage",
  "detailsInfo": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n```\ndef x(): pass\n\n\nx = 2\n```\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable.",
  "sources": [
    {
      "type": "file",
      "path": ".github/scripts/gen-bandge.py",
      "language": "Python",
      "line": 8,
      "offset": 3,
      "length": 5,
      "code": {
        "startLine": 6,
        "length": 5,
        "offset": 88,
        "surroundingCode": "  data = json.load(file)\n  total = data.get('benchmarks')[0].get('stats').get('mean')\n  value = '{:.2f}'.format(total)\n\nsvg = badge(left_text='Benchmark (SSL 1.0)', right_text=value)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyRedeclarationInspection"
  },
  "hash": "773561e37b2843bcd19ef2316eef85460b7a0bcf1905ee454af285862a12f719"
}]}