{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Duplicates",
  "severity": "Moderate",
  "comment": "Duplicated code",
  "detailsInfo": "Reports duplicated blocks of code from the selected scope: the same file or the entire project.\n\nThe inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.",
  "sources": [
    {
      "type": "Duplicates",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/CognitiveComplexityComputer.java",
      "language": "JAVA",
      "line": 327,
      "offset": 5,
      "length": 589,
      "code": {
        "startLine": 327,
        "length": 589,
        "offset": 4,
        "surroundingCode": "    final BSLParser.ExpressionContext expression = member.expression();\n\n    if (expression == null) {\n      return;\n    }\n\n    final List<Token> nestedTokens = flattenExpression(expression);\n    if (nestedTokens.isEmpty()) {\n      return;\n    }\n\n    final BSLParser.UnaryModifierContext unaryModifier = member.unaryModifier();\n\n    if (unaryModifier != null && unaryModifier.NOT_KEYWORD() != null) {\n      final var splitter = new CommonToken(-1);\n      result.add(splitter);\n      result.addAll(nestedTokens);\n      result.add(splitter);\n    } else {\n      result.addAll(nestedTokens);\n    }"
      }
    },
    {
      "type": "Duplicates",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/CyclomaticComplexityComputer.java",
      "language": "JAVA",
      "line": 252,
      "offset": 5,
      "length": 589,
      "code": {
        "startLine": 252,
        "length": 589,
        "offset": 4,
        "surroundingCode": "    final BSLParser.ExpressionContext expression = member.expression();\n\n    if (expression == null) {\n      return;\n    }\n\n    final List<Token> nestedTokens = flattenExpression(expression);\n    if (nestedTokens.isEmpty()) {\n      return;\n    }\n\n    final BSLParser.UnaryModifierContext unaryModifier = member.unaryModifier();\n\n    if (unaryModifier != null && unaryModifier.NOT_KEYWORD() != null) {\n      final var splitter = new CommonToken(-1);\n      result.add(splitter);\n      result.addAll(nestedTokens);\n      result.add(splitter);\n    } else {\n      result.addAll(nestedTokens);\n    }"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "DuplicatedCode"
  },
  "hash": "c88c0f764629a82da5452d2dc01555ed5edc605a2fcf1dba69bd62e8d9fadc82"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Duplicates",
  "severity": "Moderate",
  "comment": "Duplicated code",
  "detailsInfo": "Reports duplicated blocks of code from the selected scope: the same file or the entire project.\n\nThe inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.",
  "sources": [
    {
      "type": "Duplicates",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/CognitiveComplexityComputer.java",
      "language": "JAVA",
      "line": 308,
      "offset": 5,
      "length": 511,
      "code": {
        "startLine": 308,
        "length": 511,
        "offset": 4,
        "surroundingCode": "    List<Token> result = new ArrayList<>();\n\n    final List<Tree> children = Trees.getChildren(ctx);\n    for (Tree tree : children) {\n      if (!(tree instanceof BSLParserRuleContext parserRule)) {\n        continue;\n      }\n\n      if (parserRule instanceof BSLParser.MemberContext memberContext) {\n        flattenMember(result, memberContext);\n      } else if (parserRule instanceof BSLParser.OperationContext operationContext) {\n        flattenOperation(result, operationContext);\n      }\n    }\n\n    return result;"
      }
    },
    {
      "type": "Duplicates",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/CyclomaticComplexityComputer.java",
      "language": "JAVA",
      "line": 233,
      "offset": 5,
      "length": 511,
      "code": {
        "startLine": 233,
        "length": 511,
        "offset": 4,
        "surroundingCode": "    List<Token> result = new ArrayList<>();\n\n    final List<Tree> children = Trees.getChildren(ctx);\n    for (Tree tree : children) {\n      if (!(tree instanceof BSLParserRuleContext parserRule)) {\n        continue;\n      }\n\n      if (parserRule instanceof BSLParser.MemberContext memberContext) {\n        flattenMember(result, memberContext);\n      } else if (parserRule instanceof BSLParser.OperationContext operationContext) {\n        flattenOperation(result, operationContext);\n      }\n    }\n\n    return result;"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "DuplicatedCode"
  },
  "hash": "fab246618265fb522b6a9c0fd51489e35cd3e8f33904e662542ecc0bb9a37237"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Regular expression can be simplified",
  "severity": "Moderate",
  "comment": "`[\\\\*]` can be simplified to '\\\\\\*'",
  "detailsInfo": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UsingHardcodeSecretInformationDiagnostic.java",
      "language": "JAVA",
      "line": 67,
      "offset": 75,
      "length": 5,
      "code": {
        "startLine": 65,
        "length": 5,
        "offset": 80,
        "surroundingCode": "  );\n\n  private static final Pattern PATTERN_CHECK_PASSWORD = Pattern.compile(\"^[\\\\*]+$\", Pattern.UNICODE_CASE);\n\n  @DiagnosticParameter("
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "RegExpSimplifiable"
  },
  "hash": "a96a0536e198cbff96eebc4edc9806807b12725ac46694da2501ad5bce236c55"
}]}