{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Class structure",
  "type": "Field can be local",
  "severity": "High",
  "comment": "Field can be converted to a local variable",
  "detailsInfo": "Reports redundant class fields that can be replaced with local variables.\n\nIf all local usages of a field are preceded by assignments to that field, the\nfield can be removed, and its usages can be replaced with local variables.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/AnnotationKind.java",
      "language": "JAVA",
      "line": 41,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 39,
        "length": 9,
        "offset": 31,
        "surroundingCode": "\n  @Getter\n  private final int tokenType;\n\n  AnnotationKind(int tokenType) {"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "FieldCanBeLocal"
  },
  "hash": "3c5a6853958bc4347e640f1412041ad76c68f61e505c3c1acbf67af1e8878d51"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Field may be 'final'",
  "severity": "High",
  "comment": "Field 'parameters' may be 'final'",
  "detailsInfo": "Reports fields that can be safely made `final`. All `final` fields have a value and this value does not change, which can make the code easier to reason about.\n\nTo avoid too expensive analysis, this inspection only reports if the field has a `private` modifier\nor it is defined in a local or anonymous class.\nA field can be `final` if:\n\n* It is `static` and initialized once in its declaration or in one `static` initializer.\n* It is non-`static` and initialized once in its declaration, in one instance initializer or in every constructor\n\nAnd it is not modified anywhere else.\n\n**Example:**\n\n\n      public class Person {\n        private String name; // can be final\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Person {\n        private final String name;\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n      }\n\n\nUse the \"Annotations\" button to modify the list of annotations that assume implicit field write.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/configuration/codelens/CodeLensOptions.java",
      "language": "JAVA",
      "line": 50,
      "offset": 61,
      "length": 10,
      "code": {
        "startLine": 48,
        "length": 10,
        "offset": 123,
        "surroundingCode": "   */\n  @JsonDeserialize(using = ParametersDeserializer.class)\n  private Map<String, Either<Boolean, Map<String, Object>>> parameters = new HashMap<>();\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "FieldMayBeFinal"
  },
  "hash": "15bcaa2678a6f73e6376167c7cd75f85e1f01780daa9ef4560b075140ab7ca64"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Field may be 'final'",
  "severity": "High",
  "comment": "Field 'findFirst' may be 'final'",
  "detailsInfo": "Reports fields that can be safely made `final`. All `final` fields have a value and this value does not change, which can make the code easier to reason about.\n\nTo avoid too expensive analysis, this inspection only reports if the field has a `private` modifier\nor it is defined in a local or anonymous class.\nA field can be `final` if:\n\n* It is `static` and initialized once in its declaration or in one `static` initializer.\n* It is non-`static` and initialized once in its declaration, in one instance initializer or in every constructor\n\nAnd it is not modified anywhere else.\n\n**Example:**\n\n\n      public class Person {\n        private String name; // can be final\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Person {\n        private final String name;\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n      }\n\n\nUse the \"Annotations\" button to modify the list of annotations that assume implicit field write.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java",
      "language": "JAVA",
      "line": 75,
      "offset": 19,
      "length": 9,
      "code": {
        "startLine": 73,
        "length": 9,
        "offset": 57,
        "surroundingCode": "    defaultValue = \"\" + FIND_FIRST\n  )\n  private boolean findFirst = FIND_FIRST;\n\n  @Override"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "FieldMayBeFinal"
  },
  "hash": "c1195324e7d45d5200f240c26d107aedddb2d18dde2a71625c53d4f4cb5b8b59"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Field may be 'final'",
  "severity": "High",
  "comment": "Field 'testRunnerAdapterOptions' may be 'final'",
  "detailsInfo": "Reports fields that can be safely made `final`. All `final` fields have a value and this value does not change, which can make the code easier to reason about.\n\nTo avoid too expensive analysis, this inspection only reports if the field has a `private` modifier\nor it is defined in a local or anonymous class.\nA field can be `final` if:\n\n* It is `static` and initialized once in its declaration or in one `static` initializer.\n* It is non-`static` and initialized once in its declaration, in one instance initializer or in every constructor\n\nAnd it is not modified anywhere else.\n\n**Example:**\n\n\n      public class Person {\n        private String name; // can be final\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Person {\n        private final String name;\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n      }\n\n\nUse the \"Annotations\" button to modify the list of annotations that assume implicit field write.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/configuration/codelens/CodeLensOptions.java",
      "language": "JAVA",
      "line": 56,
      "offset": 36,
      "length": 24,
      "code": {
        "startLine": 54,
        "length": 24,
        "offset": 71,
        "surroundingCode": "   */\n  @JsonProperty(\"testRunner\")\n  private TestRunnerAdapterOptions testRunnerAdapterOptions = new TestRunnerAdapterOptions();\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "FieldMayBeFinal"
  },
  "hash": "dc5738a7401f38cf6b6c0b92b34e286e102904c14a7c2bdc63a7728be57464d8"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Field may be 'final'",
  "severity": "High",
  "comment": "Field 'interner' may be 'final'",
  "detailsInfo": "Reports fields that can be safely made `final`. All `final` fields have a value and this value does not change, which can make the code easier to reason about.\n\nTo avoid too expensive analysis, this inspection only reports if the field has a `private` modifier\nor it is defined in a local or anonymous class.\nA field can be `final` if:\n\n* It is `static` and initialized once in its declaration or in one `static` initializer.\n* It is non-`static` and initialized once in its declaration, in one instance initializer or in every constructor\n\nAnd it is not modified anywhere else.\n\n**Example:**\n\n\n      public class Person {\n        private String name; // can be final\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Person {\n        private final String name;\n\n        Person(String name) {\n          this.name = name;\n        }\n\n        public String getName() {\n          return name;\n        }\n      }\n\n\nUse the \"Annotations\" button to modify the list of annotations that assume implicit field write.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/references/model/Symbol.java",
      "language": "JAVA",
      "line": 41,
      "offset": 42,
      "length": 8,
      "code": {
        "startLine": 39,
        "length": 8,
        "offset": 94,
        "surroundingCode": "public class Symbol implements Comparable<Symbol> {\n\n  private static GenericInterner<Symbol> interner = new GenericInterner<>();\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "FieldMayBeFinal"
  },
  "hash": "de9508a49d7d8d66f38f036c679006edf2c16b717987018138bfafe229e18309"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Stream API call chain can be simplified",
  "severity": "High",
  "comment": "'collect(toUnmodifiableList())' can be replaced with 'toList()'",
  "detailsInfo": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal.\n\n\nThe inspection replaces the following call chains:\n\n* `collection.stream().forEach()` â†’ `collection.forEach()`\n* `collection.stream().collect(toList/toSet/toCollection())` â†’ `new CollectionType<>(collection)`\n* `collection.stream().toArray()` â†’ `collection.toArray()`\n* `Arrays.asList().stream()` â†’ `Arrays.stream()` or `Stream.of()`\n* `IntStream.range(0, array.length).mapToObj(idx -> array[idx])` â†’ `Arrays.stream(array)`\n* `IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))` â†’ `list.stream()`\n* `Collections.singleton().stream()` â†’ `Stream.of()`\n* `Collections.emptyList().stream()` â†’ `Stream.empty()`\n* `stream.filter().findFirst().isPresent()` â†’ `stream.anyMatch()`\n* `stream.collect(counting())` â†’ `stream.count()`\n* `stream.collect(maxBy())` â†’ `stream.max()`\n* `stream.collect(mapping())` â†’ `stream.map().collect()`\n* `stream.collect(reducing())` â†’ `stream.reduce()`\n* `stream.collect(summingInt())` â†’ `stream.mapToInt().sum()`\n* `stream.mapToObj(x -> x)` â†’ `stream.boxed()`\n* `stream.map(x -> {...; return x;})` â†’ `stream.peek(x -> ...)`\n* `!stream.anyMatch()` â†’ `stream.noneMatch()`\n* `!stream.anyMatch(x -> !(...))` â†’ `stream.allMatch()`\n* `stream.map().anyMatch(Boolean::booleanValue)` â†’ `stream.anyMatch()`\n* `IntStream.range(expr1, expr2).mapToObj(x -> array[x])` â†’ `Arrays.stream(array, expr1, expr2)`\n* `Collection.nCopies(count, ...)` â†’ `Stream.generate().limit(count)`\n* `stream.sorted(comparator).findFirst()` â†’ `Stream.min(comparator)`\n* `optional.orElseGet(() -> { throw new ...; })` â†’ `optional.orElseThrow()`\n\n\nNote that the replacement semantics may have minor differences in some cases. For example,\n`Collections.synchronizedList(...).stream().forEach()` is not synchronized while\n`Collections.synchronizedList(...).forEach()` is synchronized.\nAlso, `collect(Collectors.maxBy())` returns an empty `Optional` if the resulting element is\n`null` while `Stream.max()` throws `NullPointerException` in this case.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicatedInsertionIntoCollectionDiagnostic.java",
      "language": "JAVA",
      "line": 336,
      "offset": 10,
      "length": 40,
      "code": {
        "startLine": 334,
        "length": 40,
        "offset": 139,
        "surroundingCode": "      blockBreakers = Trees.findAllRuleNodes(codeBlock, BREAKERS_INDEXES).stream()\n        .map(BSLParserRuleContext.class::cast)\n        .collect(Collectors.toUnmodifiableList());\n    }\n    return blockBreakers;"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "SimplifyStreamApiCallChains"
  },
  "hash": "1885f755fcd925bf5a284b6146dd352c554d4271ef145a9e0380cfb1733040cd"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Stream API call chain can be simplified",
  "severity": "High",
  "comment": "'collect(toList())' can be replaced with 'toList()'",
  "detailsInfo": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal.\n\n\nThe inspection replaces the following call chains:\n\n* `collection.stream().forEach()` â†’ `collection.forEach()`\n* `collection.stream().collect(toList/toSet/toCollection())` â†’ `new CollectionType<>(collection)`\n* `collection.stream().toArray()` â†’ `collection.toArray()`\n* `Arrays.asList().stream()` â†’ `Arrays.stream()` or `Stream.of()`\n* `IntStream.range(0, array.length).mapToObj(idx -> array[idx])` â†’ `Arrays.stream(array)`\n* `IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))` â†’ `list.stream()`\n* `Collections.singleton().stream()` â†’ `Stream.of()`\n* `Collections.emptyList().stream()` â†’ `Stream.empty()`\n* `stream.filter().findFirst().isPresent()` â†’ `stream.anyMatch()`\n* `stream.collect(counting())` â†’ `stream.count()`\n* `stream.collect(maxBy())` â†’ `stream.max()`\n* `stream.collect(mapping())` â†’ `stream.map().collect()`\n* `stream.collect(reducing())` â†’ `stream.reduce()`\n* `stream.collect(summingInt())` â†’ `stream.mapToInt().sum()`\n* `stream.mapToObj(x -> x)` â†’ `stream.boxed()`\n* `stream.map(x -> {...; return x;})` â†’ `stream.peek(x -> ...)`\n* `!stream.anyMatch()` â†’ `stream.noneMatch()`\n* `!stream.anyMatch(x -> !(...))` â†’ `stream.allMatch()`\n* `stream.map().anyMatch(Boolean::booleanValue)` â†’ `stream.anyMatch()`\n* `IntStream.range(expr1, expr2).mapToObj(x -> array[x])` â†’ `Arrays.stream(array, expr1, expr2)`\n* `Collection.nCopies(count, ...)` â†’ `Stream.generate().limit(count)`\n* `stream.sorted(comparator).findFirst()` â†’ `Stream.min(comparator)`\n* `optional.orElseGet(() -> { throw new ...; })` â†’ `optional.orElseThrow()`\n\n\nNote that the replacement semantics may have minor differences in some cases. For example,\n`Collections.synchronizedList(...).stream().forEach()` is not synchronized while\n`Collections.synchronizedList(...).forEach()` is synchronized.\nAlso, `collect(Collectors.maxBy())` returns an empty `Optional` if the resulting element is\n`null` while `Stream.max()` throws `NullPointerException` in this case.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicatedInsertionIntoCollectionDiagnostic.java",
      "language": "JAVA",
      "line": 355,
      "offset": 10,
      "length": 28,
      "code": {
        "startLine": 353,
        "length": 28,
        "offset": 161,
        "surroundingCode": "        .map(BSLParser.ComplexIdentifierContext.class::cast)\n        .filter(complexIdentifierContext -> complexIdentifierContext.IDENTIFIER() != null)\n        .collect(Collectors.toList());\n      final var reducedIdentifiers = new ArrayList<String>();\n      for (BSLParser.ComplexIdentifierContext identifier : identifiers) {"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "SimplifyStreamApiCallChains"
  },
  "hash": "4513d0aa8d54a9e2b0612af01bb5ae8a2dcce0f8c8c616ca26133c4cb2ea335a"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Stream API call chain can be simplified",
  "severity": "High",
  "comment": "'collect(toUnmodifiableList())' can be replaced with 'toList()'",
  "detailsInfo": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal.\n\n\nThe inspection replaces the following call chains:\n\n* `collection.stream().forEach()` â†’ `collection.forEach()`\n* `collection.stream().collect(toList/toSet/toCollection())` â†’ `new CollectionType<>(collection)`\n* `collection.stream().toArray()` â†’ `collection.toArray()`\n* `Arrays.asList().stream()` â†’ `Arrays.stream()` or `Stream.of()`\n* `IntStream.range(0, array.length).mapToObj(idx -> array[idx])` â†’ `Arrays.stream(array)`\n* `IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))` â†’ `list.stream()`\n* `Collections.singleton().stream()` â†’ `Stream.of()`\n* `Collections.emptyList().stream()` â†’ `Stream.empty()`\n* `stream.filter().findFirst().isPresent()` â†’ `stream.anyMatch()`\n* `stream.collect(counting())` â†’ `stream.count()`\n* `stream.collect(maxBy())` â†’ `stream.max()`\n* `stream.collect(mapping())` â†’ `stream.map().collect()`\n* `stream.collect(reducing())` â†’ `stream.reduce()`\n* `stream.collect(summingInt())` â†’ `stream.mapToInt().sum()`\n* `stream.mapToObj(x -> x)` â†’ `stream.boxed()`\n* `stream.map(x -> {...; return x;})` â†’ `stream.peek(x -> ...)`\n* `!stream.anyMatch()` â†’ `stream.noneMatch()`\n* `!stream.anyMatch(x -> !(...))` â†’ `stream.allMatch()`\n* `stream.map().anyMatch(Boolean::booleanValue)` â†’ `stream.anyMatch()`\n* `IntStream.range(expr1, expr2).mapToObj(x -> array[x])` â†’ `Arrays.stream(array, expr1, expr2)`\n* `Collection.nCopies(count, ...)` â†’ `Stream.generate().limit(count)`\n* `stream.sorted(comparator).findFirst()` â†’ `Stream.min(comparator)`\n* `optional.orElseGet(() -> { throw new ...; })` â†’ `optional.orElseThrow()`\n\n\nNote that the replacement semantics may have minor differences in some cases. For example,\n`Collections.synchronizedList(...).stream().forEach()` is not synchronized while\n`Collections.synchronizedList(...).forEach()` is synchronized.\nAlso, `collect(Collectors.maxBy())` returns an empty `Optional` if the resulting element is\n`null` while `Stream.max()` throws `NullPointerException` in this case.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicatedInsertionIntoCollectionDiagnostic.java",
      "language": "JAVA",
      "line": 327,
      "offset": 10,
      "length": 40,
      "code": {
        "startLine": 325,
        "length": 40,
        "offset": 148,
        "surroundingCode": "      blockAssignments = Trees.findAllRuleNodes(codeBlock, BSLParser.RULE_assignment).stream()\n        .map(AssignmentContext.class::cast)\n        .collect(Collectors.toUnmodifiableList());\n    }\n    return blockAssignments;"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "SimplifyStreamApiCallChains"
  },
  "hash": "786cf5cdd6a3110b29f4f62d5476c61aaa03b01516b945a804774566845a866b"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Stream API call chain can be simplified",
  "severity": "High",
  "comment": "'collect(toUnmodifiableList())' can be replaced with 'toList()'",
  "detailsInfo": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal.\n\n\nThe inspection replaces the following call chains:\n\n* `collection.stream().forEach()` â†’ `collection.forEach()`\n* `collection.stream().collect(toList/toSet/toCollection())` â†’ `new CollectionType<>(collection)`\n* `collection.stream().toArray()` â†’ `collection.toArray()`\n* `Arrays.asList().stream()` â†’ `Arrays.stream()` or `Stream.of()`\n* `IntStream.range(0, array.length).mapToObj(idx -> array[idx])` â†’ `Arrays.stream(array)`\n* `IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))` â†’ `list.stream()`\n* `Collections.singleton().stream()` â†’ `Stream.of()`\n* `Collections.emptyList().stream()` â†’ `Stream.empty()`\n* `stream.filter().findFirst().isPresent()` â†’ `stream.anyMatch()`\n* `stream.collect(counting())` â†’ `stream.count()`\n* `stream.collect(maxBy())` â†’ `stream.max()`\n* `stream.collect(mapping())` â†’ `stream.map().collect()`\n* `stream.collect(reducing())` â†’ `stream.reduce()`\n* `stream.collect(summingInt())` â†’ `stream.mapToInt().sum()`\n* `stream.mapToObj(x -> x)` â†’ `stream.boxed()`\n* `stream.map(x -> {...; return x;})` â†’ `stream.peek(x -> ...)`\n* `!stream.anyMatch()` â†’ `stream.noneMatch()`\n* `!stream.anyMatch(x -> !(...))` â†’ `stream.allMatch()`\n* `stream.map().anyMatch(Boolean::booleanValue)` â†’ `stream.anyMatch()`\n* `IntStream.range(expr1, expr2).mapToObj(x -> array[x])` â†’ `Arrays.stream(array, expr1, expr2)`\n* `Collection.nCopies(count, ...)` â†’ `Stream.generate().limit(count)`\n* `stream.sorted(comparator).findFirst()` â†’ `Stream.min(comparator)`\n* `optional.orElseGet(() -> { throw new ...; })` â†’ `optional.orElseThrow()`\n\n\nNote that the replacement semantics may have minor differences in some cases. For example,\n`Collections.synchronizedList(...).stream().forEach()` is not synchronized while\n`Collections.synchronizedList(...).forEach()` is synchronized.\nAlso, `collect(Collectors.maxBy())` returns an empty `Optional` if the resulting element is\n`null` while `Stream.max()` throws `NullPointerException` in this case.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicatedInsertionIntoCollectionDiagnostic.java",
      "language": "JAVA",
      "line": 345,
      "offset": 10,
      "length": 40,
      "code": {
        "startLine": 343,
        "length": 40,
        "offset": 145,
        "surroundingCode": "      blockCallParams = Trees.findAllRuleNodes(codeBlock, BSLParser.RULE_callParam).stream()\n        .map(CallParamContext.class::cast)\n        .collect(Collectors.toUnmodifiableList());\n    }\n    return blockCallParams;"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "SimplifyStreamApiCallChains"
  },
  "hash": "d0705236022c38f06c0983cf0660d2e00eab0831b7fe3e287633601d435aaf2c"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Stream API call chain can be simplified",
  "severity": "High",
  "comment": "'collect(toList())' can be replaced with 'toList()'",
  "detailsInfo": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal.\n\n\nThe inspection replaces the following call chains:\n\n* `collection.stream().forEach()` â†’ `collection.forEach()`\n* `collection.stream().collect(toList/toSet/toCollection())` â†’ `new CollectionType<>(collection)`\n* `collection.stream().toArray()` â†’ `collection.toArray()`\n* `Arrays.asList().stream()` â†’ `Arrays.stream()` or `Stream.of()`\n* `IntStream.range(0, array.length).mapToObj(idx -> array[idx])` â†’ `Arrays.stream(array)`\n* `IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))` â†’ `list.stream()`\n* `Collections.singleton().stream()` â†’ `Stream.of()`\n* `Collections.emptyList().stream()` â†’ `Stream.empty()`\n* `stream.filter().findFirst().isPresent()` â†’ `stream.anyMatch()`\n* `stream.collect(counting())` â†’ `stream.count()`\n* `stream.collect(maxBy())` â†’ `stream.max()`\n* `stream.collect(mapping())` â†’ `stream.map().collect()`\n* `stream.collect(reducing())` â†’ `stream.reduce()`\n* `stream.collect(summingInt())` â†’ `stream.mapToInt().sum()`\n* `stream.mapToObj(x -> x)` â†’ `stream.boxed()`\n* `stream.map(x -> {...; return x;})` â†’ `stream.peek(x -> ...)`\n* `!stream.anyMatch()` â†’ `stream.noneMatch()`\n* `!stream.anyMatch(x -> !(...))` â†’ `stream.allMatch()`\n* `stream.map().anyMatch(Boolean::booleanValue)` â†’ `stream.anyMatch()`\n* `IntStream.range(expr1, expr2).mapToObj(x -> array[x])` â†’ `Arrays.stream(array, expr1, expr2)`\n* `Collection.nCopies(count, ...)` â†’ `Stream.generate().limit(count)`\n* `stream.sorted(comparator).findFirst()` â†’ `Stream.min(comparator)`\n* `optional.orElseGet(() -> { throw new ...; })` â†’ `optional.orElseThrow()`\n\n\nNote that the replacement semantics may have minor differences in some cases. For example,\n`Collections.synchronizedList(...).stream().forEach()` is not synchronized while\n`Collections.synchronizedList(...).forEach()` is synchronized.\nAlso, `collect(Collectors.maxBy())` returns an empty `Optional` if the resulting element is\n`null` while `Stream.max()` throws `NullPointerException` in this case.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/infrastructure/DiagnosticsConfiguration.java",
      "language": "JAVA",
      "line": 115,
      "offset": 8,
      "length": 28,
      "code": {
        "startLine": 113,
        "length": 28,
        "offset": 143,
        "surroundingCode": "    var subsystemsNames = subsystemFlatList(mdoObject.get().getIncludedSubsystems()).stream()\n      .map(AbstractMDObjectBase::getName)\n      .collect(Collectors.toList());\n\n    var include = subsystemsFilter.getInclude().isEmpty()"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "SimplifyStreamApiCallChains"
  },
  "hash": "e5589229362e11056317cf4307b4abfb84baf322cb92b6c78c307b88a7d06487"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Stream API call chain can be simplified",
  "severity": "High",
  "comment": "'collect(toList())' can be replaced with 'toList()'",
  "detailsInfo": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal.\n\n\nThe inspection replaces the following call chains:\n\n* `collection.stream().forEach()` â†’ `collection.forEach()`\n* `collection.stream().collect(toList/toSet/toCollection())` â†’ `new CollectionType<>(collection)`\n* `collection.stream().toArray()` â†’ `collection.toArray()`\n* `Arrays.asList().stream()` â†’ `Arrays.stream()` or `Stream.of()`\n* `IntStream.range(0, array.length).mapToObj(idx -> array[idx])` â†’ `Arrays.stream(array)`\n* `IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))` â†’ `list.stream()`\n* `Collections.singleton().stream()` â†’ `Stream.of()`\n* `Collections.emptyList().stream()` â†’ `Stream.empty()`\n* `stream.filter().findFirst().isPresent()` â†’ `stream.anyMatch()`\n* `stream.collect(counting())` â†’ `stream.count()`\n* `stream.collect(maxBy())` â†’ `stream.max()`\n* `stream.collect(mapping())` â†’ `stream.map().collect()`\n* `stream.collect(reducing())` â†’ `stream.reduce()`\n* `stream.collect(summingInt())` â†’ `stream.mapToInt().sum()`\n* `stream.mapToObj(x -> x)` â†’ `stream.boxed()`\n* `stream.map(x -> {...; return x;})` â†’ `stream.peek(x -> ...)`\n* `!stream.anyMatch()` â†’ `stream.noneMatch()`\n* `!stream.anyMatch(x -> !(...))` â†’ `stream.allMatch()`\n* `stream.map().anyMatch(Boolean::booleanValue)` â†’ `stream.anyMatch()`\n* `IntStream.range(expr1, expr2).mapToObj(x -> array[x])` â†’ `Arrays.stream(array, expr1, expr2)`\n* `Collection.nCopies(count, ...)` â†’ `Stream.generate().limit(count)`\n* `stream.sorted(comparator).findFirst()` â†’ `Stream.min(comparator)`\n* `optional.orElseGet(() -> { throw new ...; })` â†’ `optional.orElseThrow()`\n\n\nNote that the replacement semantics may have minor differences in some cases. For example,\n`Collections.synchronizedList(...).stream().forEach()` is not synchronized while\n`Collections.synchronizedList(...).forEach()` is synchronized.\nAlso, `collect(Collectors.maxBy())` returns an empty `Optional` if the resulting element is\n`null` while `Stream.max()` throws `NullPointerException` in this case.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/IfElseDuplicatedConditionDiagnostic.java",
      "language": "JAVA",
      "line": 95,
      "offset": 8,
      "length": 28,
      "code": {
        "startLine": 93,
        "length": 28,
        "offset": 140,
        "surroundingCode": "        !expressionContext.equals(currentExpression)\n          && DiagnosticHelper.equalNodes(currentExpression, expressionContext))\n      .collect(Collectors.toList());\n\n    if (identicalExpressions.isEmpty()) {"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "SimplifyStreamApiCallChains"
  },
  "hash": "e588b635d1002572a4476848fe134706adcc0ea98d763513ce29697660fec8b4"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Concatenation with empty string",
  "severity": "High",
  "comment": "Empty string used in concatenation",
  "detailsInfo": "Reports string concatenations where one of the arguments is the empty string. Such a concatenation is unnecessary. Sometimes, it's used as an idiom for converting non-`String` objects or primitives into `String`s, but in this case, it's clearer to use a method like `String.valueOf`.\n\n\nA quick-fix is suggested to simplify the concatenation.\n\n**Example:**\n\n\n      void foo(int x, int y) {\n        String s = \"\" + x + \" ; \" + y;\n      }\n\nAfter the quick-fix is applied:\n\n\n      void foo(int x, int y) {\n        String s = x + \" ; \" + y;\n      }\n\n\nUse the **Report only cases when empty string can be deleted without other changes**\noption to only report cases when empty string can be deleted\nwithout conversion other operands with `String.valueOf`.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicNumberDiagnostic.java",
      "language": "JAVA",
      "line": 55,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 53,
        "length": 2,
        "offset": 68,
        "surroundingCode": "  @DiagnosticParameter(\n    type = String.class,\n    defaultValue = \"\" + DEFAULT_AUTHORIZED_NUMBERS\n  )\n  private final List<String> authorizedNumbers = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_NUMBERS.split(\",\")));"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "TrivialStringConcatenation"
  },
  "hash": "3838bfdeb73c4da9d19b9553e01017fab66c39e4dc61e852a22bb46999b4e8fb"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Concatenation with empty string",
  "severity": "High",
  "comment": "Empty string used in concatenation",
  "detailsInfo": "Reports string concatenations where one of the arguments is the empty string. Such a concatenation is unnecessary. Sometimes, it's used as an idiom for converting non-`String` objects or primitives into `String`s, but in this case, it's clearer to use a method like `String.valueOf`.\n\n\nA quick-fix is suggested to simplify the concatenation.\n\n**Example:**\n\n\n      void foo(int x, int y) {\n        String s = \"\" + x + \" ; \" + y;\n      }\n\nAfter the quick-fix is applied:\n\n\n      void foo(int x, int y) {\n        String s = x + \" ; \" + y;\n      }\n\n\nUse the **Report only cases when empty string can be deleted without other changes**\noption to only report cases when empty string can be deleted\nwithout conversion other operands with `String.valueOf`.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/IncorrectLineBreakDiagnostic.java",
      "language": "JAVA",
      "line": 74,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 72,
        "length": 2,
        "offset": 68,
        "surroundingCode": "  @DiagnosticParameter(\n    type = String.class,\n    defaultValue = \"\" + DEFAULT_LIST_FOR_CHECK_START\n  )\n  private Pattern listOfIncorrectFirstSymbol = createPatternIncorrectStartLine(DEFAULT_LIST_FOR_CHECK_START);"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "TrivialStringConcatenation"
  },
  "hash": "5355e6263896b63b853194d62435b8e7866ea257b8d1180f53381031fa7f157d"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Concatenation with empty string",
  "severity": "High",
  "comment": "Empty string used in concatenation",
  "detailsInfo": "Reports string concatenations where one of the arguments is the empty string. Such a concatenation is unnecessary. Sometimes, it's used as an idiom for converting non-`String` objects or primitives into `String`s, but in this case, it's clearer to use a method like `String.valueOf`.\n\n\nA quick-fix is suggested to simplify the concatenation.\n\n**Example:**\n\n\n      void foo(int x, int y) {\n        String s = \"\" + x + \" ; \" + y;\n      }\n\nAfter the quick-fix is applied:\n\n\n      void foo(int x, int y) {\n        String s = x + \" ; \" + y;\n      }\n\n\nUse the **Report only cases when empty string can be deleted without other changes**\noption to only report cases when empty string can be deleted\nwithout conversion other operands with `String.valueOf`.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/IncorrectLineBreakDiagnostic.java",
      "language": "JAVA",
      "line": 86,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 84,
        "length": 2,
        "offset": 68,
        "surroundingCode": "  @DiagnosticParameter(\n    type = String.class,\n    defaultValue = \"\" + DEFAULT_LIST_FOR_CHECK_END\n  )\n  private Pattern listOfIncorrectLastSymbol = createPatternIncorrectEndLine(DEFAULT_LIST_FOR_CHECK_END);"
      }
    }
  ],
  "attributes": {
    "module": "bsl-language-server.main",
    "inspectionName": "TrivialStringConcatenation"
  },
  "hash": "71fad01f46f068479c1dec20f8a590a32612f69d6f8ca4af831065bf49393b42"
}]}